	多线程访问共享数据和对象的方式：
	1.如果每个线程执行的代码相同，可以使用一个Runnable对象，Runnable对象中有那个共享数据，例如卖票系统
	2.如果每个线程执行的代码不同，需多个Runnable对象，实现对象之间的数据共享方式：
		将共享数据封装在另外一个对象中，线程对共享数据操作的方法也分配到对象中。将这个对象传递给Runnable对
		象，或者Runnable可以使用这个对象
	
	用于解决多线程同步问题
	1.隐试锁：
			同步代码块或者同步方法
	2.显示锁如：
			同步锁 lock(jdk1.5以后)，通过lock()方法上锁，必须通过unlock()解锁
			读写锁
	3.读写锁(ReadWriteLock)
			分为读锁和写锁
	
	1.volatile
	作用：用volatile修饰的变量，线程在每次使用变量的时候，都会读取变量修改后的最新的值（内存可见性）
		 不能保证原子性	
		 
	2.Atomic原子类
	作用：保证内存可见性和
		 原子性，操作不可分割如：i++（通过cas算法实现）
	
	3.concurrentHashMap:concurrent包提供的并发容器类来改进同步容器性能
		采用“锁分段”机制，jdk1.8之后采用CAS算法实现
	
	4.countDownLatch闭锁
	作用：在完成一组其他线程操作之前，允许一个或多个线程一直等待
	
	5.callable创建线程
	作用：使用callable接口创建线程，用FutureTask接受线程执行的结果（类似于countdownlatch）
	
	6.lock线程锁
	作用：解决线程同步问题
	
	7.ThreadLocal线程本地变量
	作用：为每一个线程都创建一个副本，线程可以访问自己内部的副本变量，只能存储一个对象
	
	8.Executer执行器
	作用：管理Thread对象从而简化并发编程
	excute方法与submit方法的区别
	1.接受参数不一样
	2.submit与返回值，excute没有返回值
	3.submit可以进行Exception处理
				